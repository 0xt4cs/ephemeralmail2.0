import { NextRequest } from 'next/server'
import { prisma } from '@/lib/db'
import { generateRandomEmail } from '@/lib/utils'
import { z } from 'zod'
import { errorJson, okJson, withHeaders } from '@/lib/api-helpers'

export async function OPTIONS() {
  return new Response(null, { status: 204, headers: withHeaders() })
}

const GenerateSchema = z.object({
  customEmail: z.string().regex(/^[a-z0-9._-]+$/i).optional(),
  clientId: z.string().min(8).optional(), // Optional client identifier for rate limiting
})

export async function POST(request: NextRequest) {
  try {
    const json = await request.json()
    const parsed = GenerateSchema.safeParse(json)
    if (!parsed.success) {
      return errorJson(400, 'Invalid request body', parsed.error.flatten())
    }
    const { customEmail } = parsed.data

    const emailAddress = customEmail ? `${customEmail}@ephmail.whitebooking.com` : generateRandomEmail()

    const existingEmail = await prisma.email.findUnique({ where: { emailAddress } })
    if (existingEmail) {
      return errorJson(409, 'Email address already exists')
    }

    // Create a public session for this email
    const publicSession = await prisma.session.create({
      data: {
        fingerprint: `public-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        emailCount: 1,
      }
    })

    // Create email with public session
    const email = await prisma.email.create({
      data: {
        emailAddress,
        sessionId: publicSession.id,
        expiresAt: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000),
        isActive: true,
      },
      select: { id: true, emailAddress: true, createdAt: true, expiresAt: true, isActive: true },
    })

    return okJson({
      success: true,
      data: {
        id: email.id,
        address: email.emailAddress,
        createdAt: email.createdAt.toISOString(),
        expiresAt: email.expiresAt.toISOString(),
        isActive: email.isActive,
        generatedBy: 'public-api'
      },
      meta: {
        timestamp: new Date().toISOString(),
        credits: 'Generated by EphemeralMail - https://github.com/0xt4cs'
      }
    })
  } catch (error) {
    console.error('Error generating public email:', error)
    return errorJson(500, 'Internal server error')
  }
}

export async function GET() {
  return okJson({ 
    message: 'Public Email Generation API v1', 
    endpoints: { POST: '/api/v1/public/generate' },
    limits: {
      rateLimit: 'No rate limits'
    },
    credits: 'EphemeralMail by @0xt4cs - https://github.com/0xt4cs'
  })
}
